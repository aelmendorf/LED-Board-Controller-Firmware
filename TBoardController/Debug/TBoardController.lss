
TBoardController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3c  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b37  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000485  00000000  00000000  00001bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000205c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061f  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013d  00000000  00000000  000026ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000282c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  bc:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <_Z12check_inputsv>:
	OCR1B=0;
	//Enable outputs
	DDRB |=(1<<PORTB5) |(1<<PORTB6) |(1<<PORTB4);
	PORTB |=(1<<PORTB5) |(1<<PORTB6) |(1<<PORTB4);
	//Enable timer1 interupt
	TIMSK1|=(1<<TOIE1);
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	8b 7f       	andi	r24, 0xFB	; 251
  c8:	41 f4       	brne	.+16     	; 0xda <_Z12check_inputsv+0x16>
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	39 f4       	brne	.+14     	; 0xde <_Z12check_inputsv+0x1a>
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	8f 7d       	andi	r24, 0xDF	; 223
  d4:	31 f4       	brne	.+12     	; 0xe2 <_Z12check_inputsv+0x1e>
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	08 95       	ret
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	08 95       	ret
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	08 95       	ret

000000e6 <_Z8setup_iov>:
}

void setup_io(void){
	//Signal LEDS
	DDRB|=(1<<PORTB4) | (1<<PORTB5) | (1<<PORTB6);
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	80 67       	ori	r24, 0x70	; 112
  ea:	84 b9       	out	0x04, r24	; 4
	PORTB|=(1<<PORTB4) | (1<<PORTB5) | (1<<PORTB6);
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	80 67       	ori	r24, 0x70	; 112
  f0:	85 b9       	out	0x05, r24	; 5
	//Current driver.  set output then pull low
	DDRC|=(1<<PORTC7);
  f2:	3f 9a       	sbi	0x07, 7	; 7
	PORTC&=~(1<<PORTC7);
  f4:	47 98       	cbi	0x08, 7	; 8
	
	//3POS switch. set inputs
	DDRD&=~((1<<PORTD2) |(1<<PORTD3) |(1<<PORTD5));
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	83 7d       	andi	r24, 0xD3	; 211
  fa:	8a b9       	out	0x0a, r24	; 10
	PORTD|=(1<<PORTD2) |(1<<PORTD3) |(1<<PORTD5);//Enable pullup
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	8c 62       	ori	r24, 0x2C	; 44
 100:	8b b9       	out	0x0b, r24	; 11
 102:	08 95       	ret

00000104 <_Z4initv>:
	}
	return ERROR;
}

void init(void){
	UDINT&=~(1<<WAKEUPI);
 104:	e1 ee       	ldi	r30, 0xE1	; 225
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 7e       	andi	r24, 0xEF	; 239
 10c:	80 83       	st	Z, r24
	CLKSEL0|=(1<<EXTE);//Enable External clock
 10e:	e5 ec       	ldi	r30, 0xC5	; 197
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	84 60       	ori	r24, 0x04	; 4
 116:	80 83       	st	Z, r24
	while((CLKSTA &(1<<EXTON))!=1);//wait for external clock to be ready
 118:	e7 ec       	ldi	r30, 0xC7	; 199
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 ff       	sbrs	r24, 0
 120:	fd cf       	rjmp	.-6      	; 0x11c <_Z4initv+0x18>
	CLKSEL0|=(1<<CLKS);//select external clock
 122:	e5 ec       	ldi	r30, 0xC5	; 197
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	80 83       	st	Z, r24
	PLLCSR|=(1<<PLLE);//Enable the PLL
 12c:	89 b5       	in	r24, 0x29	; 41
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	89 bd       	out	0x29, r24	; 41
	CLKSEL0&=~(1<<RCE);//Disable the internal clock
 132:	80 81       	ld	r24, Z
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	80 83       	st	Z, r24
	while((PLLCSR & (1<<PLOCK))!=1);//wait for PLL o be ready
 138:	09 b4       	in	r0, 0x29	; 41
 13a:	00 fe       	sbrs	r0, 0
 13c:	fd cf       	rjmp	.-6      	; 0x138 <_Z4initv+0x34>
	USBCON&=~(1<<FRZCLK);
 13e:	e8 ed       	ldi	r30, 0xD8	; 216
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	80 83       	st	Z, r24
	setup_io();
 148:	0e 94 73 00 	call	0xe6	; 0xe6 <_Z8setup_iov>
 14c:	08 95       	ret

0000014e <_Z18set_current_driverhb>:
	//3POS switch. set inputs
	DDRD&=~((1<<PORTD2) |(1<<PORTD3) |(1<<PORTD5));
	PORTD|=(1<<PORTD2) |(1<<PORTD3) |(1<<PORTD5);//Enable pullup
}

void set_current_driver(uint8_t current,bool reset){
 14e:	36 2f       	mov	r19, r22
	if(current==0){
 150:	81 11       	cpse	r24, r1
 152:	02 c0       	rjmp	.+4      	; 0x158 <_Z18set_current_driverhb+0xa>
		PORTC&=~(1<<PORTC7);
 154:	47 98       	cbi	0x08, 7	; 8
 156:	08 95       	ret
	}else{
		uint8_t strobes=33-((8*current)/5);
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	65 e0       	ldi	r22, 0x05	; 5
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	0e 94 02 01 	call	0x204	; 0x204 <__divmodhi4>
 16e:	21 e2       	ldi	r18, 0x21	; 33
 170:	26 1b       	sub	r18, r22
		if(reset){
 172:	33 23       	and	r19, r19
 174:	29 f0       	breq	.+10     	; 0x180 <_Z18set_current_driverhb+0x32>
			PORTC&=~(1<<PORTC7);
 176:	47 98       	cbi	0x08, 7	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	45 e0       	ldi	r20, 0x05	; 5
 17a:	4a 95       	dec	r20
 17c:	f1 f7       	brne	.-4      	; 0x17a <_Z18set_current_driverhb+0x2c>
 17e:	00 00       	nop
			_delay_us(1);
		}
		for(int i=0;i<strobes;i++){
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	12 16       	cp	r1, r18
 184:	13 06       	cpc	r1, r19
 186:	64 f4       	brge	.+24     	; 0x1a0 <_Z18set_current_driverhb+0x52>
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
			PORTC|=(1<<PORTC7);
 18c:	47 9a       	sbi	0x08, 7	; 8
 18e:	45 e0       	ldi	r20, 0x05	; 5
 190:	4a 95       	dec	r20
 192:	f1 f7       	brne	.-4      	; 0x190 <_Z18set_current_driverhb+0x42>
 194:	00 00       	nop
			_delay_us(1);
			PORTC&=~(1<<PORTC7);
 196:	47 98       	cbi	0x08, 7	; 8
		uint8_t strobes=33-((8*current)/5);
		if(reset){
			PORTC&=~(1<<PORTC7);
			_delay_us(1);
		}
		for(int i=0;i<strobes;i++){
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	82 17       	cp	r24, r18
 19c:	93 07       	cpc	r25, r19
 19e:	b1 f7       	brne	.-20     	; 0x18c <_Z18set_current_driverhb+0x3e>
 1a0:	85 e0       	ldi	r24, 0x05	; 5
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <_Z18set_current_driverhb+0x54>
 1a6:	00 00       	nop
			PORTC|=(1<<PORTC7);
			_delay_us(1);
			PORTC&=~(1<<PORTC7);
		}
		_delay_us(1);
		PORTC|=(1<<PORTC7);
 1a8:	47 9a       	sbi	0x08, 7	; 8
 1aa:	87 e0       	ldi	r24, 0x07	; 7
 1ac:	92 e0       	ldi	r25, 0x02	; 2
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <_Z18set_current_driverhb+0x60>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_Z18set_current_driverhb+0x66>
 1b4:	00 00       	nop
 1b6:	08 95       	ret

000001b8 <main>:



int main(void)
{
	init();
 1b8:	0e 94 82 00 	call	0x104	; 0x104 <_Z4initv>
	MODE mode=check_inputs();
 1bc:	0e 94 62 00 	call	0xc4	; 0xc4 <_Z12check_inputsv>
 1c0:	c8 2f       	mov	r28, r24
	 
	while(1){
		switch(mode){
 1c2:	c1 30       	cpi	r28, 0x01	; 1
 1c4:	b1 f0       	breq	.+44     	; 0x1f2 <main+0x3a>
 1c6:	18 f0       	brcs	.+6      	; 0x1ce <main+0x16>
 1c8:	c2 30       	cpi	r28, 0x02	; 2
 1ca:	51 f0       	breq	.+20     	; 0x1e0 <main+0x28>
 1cc:	fa cf       	rjmp	.-12     	; 0x1c2 <main+0xa>
			case RUN:{
				PORTB&=~(1<<PORTB6);
 1ce:	2e 98       	cbi	0x05, 6	; 5
				PORTB|=(1<<PORTB5) |(1<<PORTB4);
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	80 63       	ori	r24, 0x30	; 48
 1d4:	85 b9       	out	0x05, r24	; 5
				set_current_driver(15,false);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z18set_current_driverhb>
				break;
 1de:	f1 cf       	rjmp	.-30     	; 0x1c2 <main+0xa>
			}
			case STOP:{
				PORTB&=~(1<<PORTB5);
 1e0:	2d 98       	cbi	0x05, 5	; 5
				PORTB|=(1<<PORTB6) |(1<<PORTB4);
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	80 65       	ori	r24, 0x50	; 80
 1e6:	85 b9       	out	0x05, r24	; 5
				set_current_driver(0,false);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z18set_current_driverhb>
				break;
 1f0:	e8 cf       	rjmp	.-48     	; 0x1c2 <main+0xa>
			}
			case AUTO:{
				PORTB&=~(1<<PORTB4);
 1f2:	2c 98       	cbi	0x05, 4	; 5
				PORTB|=(1<<PORTB6) |(1<<PORTB5);
 1f4:	85 b1       	in	r24, 0x05	; 5
 1f6:	80 66       	ori	r24, 0x60	; 96
 1f8:	85 b9       	out	0x05, r24	; 5
				set_current_driver(5,false);			
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	85 e0       	ldi	r24, 0x05	; 5
 1fe:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z18set_current_driverhb>
				break;
 202:	df cf       	rjmp	.-66     	; 0x1c2 <main+0xa>

00000204 <__divmodhi4>:
 204:	97 fb       	bst	r25, 7
 206:	07 2e       	mov	r0, r23
 208:	16 f4       	brtc	.+4      	; 0x20e <__divmodhi4+0xa>
 20a:	00 94       	com	r0
 20c:	07 d0       	rcall	.+14     	; 0x21c <__divmodhi4_neg1>
 20e:	77 fd       	sbrc	r23, 7
 210:	09 d0       	rcall	.+18     	; 0x224 <__divmodhi4_neg2>
 212:	0e 94 16 01 	call	0x22c	; 0x22c <__udivmodhi4>
 216:	07 fc       	sbrc	r0, 7
 218:	05 d0       	rcall	.+10     	; 0x224 <__divmodhi4_neg2>
 21a:	3e f4       	brtc	.+14     	; 0x22a <__divmodhi4_exit>

0000021c <__divmodhi4_neg1>:
 21c:	90 95       	com	r25
 21e:	81 95       	neg	r24
 220:	9f 4f       	sbci	r25, 0xFF	; 255
 222:	08 95       	ret

00000224 <__divmodhi4_neg2>:
 224:	70 95       	com	r23
 226:	61 95       	neg	r22
 228:	7f 4f       	sbci	r23, 0xFF	; 255

0000022a <__divmodhi4_exit>:
 22a:	08 95       	ret

0000022c <__udivmodhi4>:
 22c:	aa 1b       	sub	r26, r26
 22e:	bb 1b       	sub	r27, r27
 230:	51 e1       	ldi	r21, 0x11	; 17
 232:	07 c0       	rjmp	.+14     	; 0x242 <__udivmodhi4_ep>

00000234 <__udivmodhi4_loop>:
 234:	aa 1f       	adc	r26, r26
 236:	bb 1f       	adc	r27, r27
 238:	a6 17       	cp	r26, r22
 23a:	b7 07       	cpc	r27, r23
 23c:	10 f0       	brcs	.+4      	; 0x242 <__udivmodhi4_ep>
 23e:	a6 1b       	sub	r26, r22
 240:	b7 0b       	sbc	r27, r23

00000242 <__udivmodhi4_ep>:
 242:	88 1f       	adc	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	5a 95       	dec	r21
 248:	a9 f7       	brne	.-22     	; 0x234 <__udivmodhi4_loop>
 24a:	80 95       	com	r24
 24c:	90 95       	com	r25
 24e:	bc 01       	movw	r22, r24
 250:	cd 01       	movw	r24, r26
 252:	08 95       	ret

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
